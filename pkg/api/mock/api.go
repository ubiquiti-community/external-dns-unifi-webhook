// Code generated by MockGen. DO NOT EDIT.
// Source: ./api.go

// Package mock_api is a generated GoMock package.
package mock_api

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	endpoint "sigs.k8s.io/external-dns/endpoint"
	plan "sigs.k8s.io/external-dns/plan"
)

// MockApi is a mock of Api interface.
type MockApi struct {
	ctrl     *gomock.Controller
	recorder *MockApiMockRecorder
}

// MockApiMockRecorder is the mock recorder for MockApi.
type MockApiMockRecorder struct {
	mock *MockApi
}

// NewMockApi creates a new mock instance.
func NewMockApi(ctrl *gomock.Controller) *MockApi {
	mock := &MockApi{ctrl: ctrl}
	mock.recorder = &MockApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApi) EXPECT() *MockApiMockRecorder {
	return m.recorder
}

// Listen mocks base method.
func (m *MockApi) Listen(port string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Listen", port)
	ret0, _ := ret[0].(error)
	return ret0
}

// Listen indicates an expected call of Listen.
func (mr *MockApiMockRecorder) Listen(port interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockApi)(nil).Listen), port)
}

// Test mocks base method.
func (m *MockApi) Test(req *http.Request, msTimeout ...int) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range msTimeout {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Test", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Test indicates an expected call of Test.
func (mr *MockApiMockRecorder) Test(req interface{}, msTimeout ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, msTimeout...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Test", reflect.TypeOf((*MockApi)(nil).Test), varargs...)
}

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// AdjustEndpoints mocks base method.
func (m *MockProvider) AdjustEndpoints(endpoints []*endpoint.Endpoint) []*endpoint.Endpoint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdjustEndpoints", endpoints)
	ret0, _ := ret[0].([]*endpoint.Endpoint)
	return ret0
}

// AdjustEndpoints indicates an expected call of AdjustEndpoints.
func (mr *MockProviderMockRecorder) AdjustEndpoints(endpoints interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdjustEndpoints", reflect.TypeOf((*MockProvider)(nil).AdjustEndpoints), endpoints)
}

// ApplyChanges mocks base method.
func (m *MockProvider) ApplyChanges(ctx context.Context, changes *plan.Changes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyChanges", ctx, changes)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyChanges indicates an expected call of ApplyChanges.
func (mr *MockProviderMockRecorder) ApplyChanges(ctx, changes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyChanges", reflect.TypeOf((*MockProvider)(nil).ApplyChanges), ctx, changes)
}

// GetDomainFilter mocks base method.
func (m *MockProvider) GetDomainFilter() endpoint.DomainFilter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainFilter")
	ret0, _ := ret[0].(endpoint.DomainFilter)
	return ret0
}

// GetDomainFilter indicates an expected call of GetDomainFilter.
func (mr *MockProviderMockRecorder) GetDomainFilter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainFilter", reflect.TypeOf((*MockProvider)(nil).GetDomainFilter))
}

// Records mocks base method.
func (m *MockProvider) Records(ctx context.Context) ([]*endpoint.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Records", ctx)
	ret0, _ := ret[0].([]*endpoint.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Records indicates an expected call of Records.
func (mr *MockProviderMockRecorder) Records(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Records", reflect.TypeOf((*MockProvider)(nil).Records), ctx)
}
